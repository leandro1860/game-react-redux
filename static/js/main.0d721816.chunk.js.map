{"version":3,"sources":["shared/images/playerImage.jpg","model/actions/gameData.js","model/constants/gameData.js","features/createGame/index.jsx","model/actions/cardData.js","model/constants/cardData.js","model/actions/playerData.js","model/constants/playerData.js","model/actions/monsterData.js","model/constants/monsterData.js","model/actions/monsterEffect.js","model/constants/monsterEffect.js","utils/apiCalls.js","features/gameMember/index.jsx","model/actions/selectCard.js","model/constants/selectCard.js","features/gameCard/index.jsx","features/modalNotification/index.jsx","features/gameTurns/index.jsx","features/gameBoard/index.jsx","app/index.js","model/reducers/gameData.js","model/reducers/playerData.js","model/reducers/monsterData.js","model/reducers/cardData.js","model/reducers/selectCard.js","model/reducers/monsterEffect.js","model/reducers/root.js","serviceWorker.js","index.js","model/configureStore.js"],"names":["module","exports","gameDataAction","setData","data","type","CreateGame","dispatch","useDispatch","history","useHistory","useState","playerName","setPlayerName","validated","setValidated","getGame","name","a","axios","post","then","res","push","console","error","Container","className","Form","noValidate","onSubmit","event","preventDefault","FormGroup","FormControl","placeholder","onChange","e","target","value","required","Control","Feedback","Button","block","cardDataAction","playerDataAction","monsterDataAction","monsterEffectAction","getPlayer","gameId","get","store","getMonster","getCards","playerDataId","getSelectCards","selectCardId","card","game","monsterEffect","GameMember","image","maxHp","hp","shield","useSelector","state","gameDataReducer","dataGame","id","useEffect","Row","Col","Card","col","Img","top","width","src","alt","bg-dark","Body","Title","selectCardAction","GameCard","monsterData","monsterEffectReducer","playerData","playerDataReducer","cardData","cardDataReducer","map","reverse","slice","selectedCard","selectCardReducer","selectCard","horrorCard","effect","log","key","onClick","Text","ModalNotification","props","Modal","show","Header","result","statistics","Footer","variant","playAgain","GameTurns","currentTurn","past","turnsLeft","monsterDataReducer","fullGameData","modalShow","setModalShow","gameResult","setGameResult","gameStatistics","setGameStatistics","turnClick","GameBoard","playerImage","App","path","exact","initialState","action","rootReducer","combineReducers","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0d721816.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/playerImage.486a5d5c.jpg\";","import {GAME_DATA} from \"../constants/gameData\";\n\nconst setData = data => ({type: GAME_DATA, data});\n\nexport const gameDataAction = {\n  setData\n};\n\nexport default gameDataAction;\n","export const GAME_DATA = \"GAME_DATA\";\n","import React, {useState} from \"react\";\nimport {\n  Form,\n  FormGroup,\n  FormControl,\n  Button,\n  Container\n} from \"react-bootstrap\";\nimport axios from \"axios\";\nimport {useDispatch} from \"react-redux\";\nimport {useHistory} from \"react-router-dom\";\nimport \"./createGame.css\";\nimport gameDataAction from \"../../model/actions/gameData\";\n\nconst CreateGame = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const [playerName, setPlayerName] = useState(\"\");\n  const [validated, setValidated] = useState(false);\n\n  const getGame = async name => {\n    try {\n      await axios\n        .post(\"http://game.bons.me/api/games?name\", {name})\n        .then(res => {\n          const {data} = res;\n          dispatch(gameDataAction.setData(data));\n          history.push(\"/board\");\n        });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChangeText = e => {\n    setPlayerName(e.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setValidated(true);\n    getGame(playerName);\n  };\n\n  return (\n    <Container>\n      <div className='create-game'>\n        <div className='welcome-title'>\n          <h1>Welcome to Game</h1>\n          <h3>What´s your name?</h3>\n        </div>\n        <div className='entry-form'>\n          <Form validated={validated} noValidate onSubmit={handleSubmit}>\n            <FormGroup>\n              <FormControl\n                type='text'\n                placeholder='Your name...'\n                onChange={handleChangeText}\n                required\n              />\n              <Form.Control.Feedback type='invalid'>\n                Please provide a name.\n              </Form.Control.Feedback>\n            </FormGroup>\n            <Button block type='submit'>\n              LET´S PLAY\n            </Button>\n          </Form>\n        </div>\n      </div>\n    </Container>\n  );\n};\n\nexport default CreateGame;\n","import {CARD_DATA} from \"../constants/cardData\";\n\nconst setData = data => ({type: CARD_DATA, data});\n\nexport const cardDataAction = {\n  setData\n};\n\nexport default cardDataAction;\n","export const CARD_DATA = \"CARD_DATA\";\n","import {PLAYER_DATA} from \"../constants/playerData\";\n\nconst setData = data => ({type: PLAYER_DATA, data});\n\nexport const playerDataAction = {\n  setData\n};\n\nexport default playerDataAction;\n","export const PLAYER_DATA = \"PLAYER_DATA\";\n","import {MONSTER_DATA} from \"../constants/monsterData\";\n\nconst setData = data => ({type: MONSTER_DATA, data});\n\nexport const monsterDataAction = {\n  setData\n};\n\nexport default monsterDataAction;\n","export const MONSTER_DATA = \"MONSTER_DATA\";\n","import {MONSTER_EFFECT} from \"../constants/monsterEffect\";\n\nconst setData = data => ({type: MONSTER_EFFECT, data});\n\nexport const monsterEffectAction = {\n  setData\n};\n\nexport default monsterEffectAction;\n","export const MONSTER_EFFECT = \"MONSTER_EFFECT\";\n","import axios from \"axios\";\nimport {store} from \"../index\";\nimport cardDataAction from \"../model/actions/cardData\";\nimport playerDataAction from \"../model/actions/playerData\";\nimport monsterDataAction from \"../model/actions/monsterData\";\nimport gameDataAction from \"../model/actions/gameData\";\nimport monsterEffectAction from \"../model/actions/monsterEffect\";\n\nexport const getPlayer = async gameId => {\n  try {\n    await axios\n      .get(`http://game.bons.me/api/games/${gameId}/player`)\n      .then(res => {\n        const {data} = res;\n        store.dispatch(playerDataAction.setData(data));\n      });\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const getMonster = async gameId => {\n  try {\n    await axios\n      .get(`http://game.bons.me/api/games/${gameId}/monster`)\n      .then(res => {\n        const {data} = res;\n        store.dispatch(monsterDataAction.setData(data));\n      });\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const getCards = async playerDataId => {\n  try {\n    await axios\n      .get(`http://game.bons.me/api/players/${playerDataId}/cards`)\n      .then(res => {\n        const {data} = res;\n        store.dispatch(cardDataAction.setData(data));\n      });\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const getSelectCards = async (gameId, selectCardId) => {\n  try {\n    await axios\n      .post(`http://game.bons.me/api/games/${gameId}/next-turn`, {\n        card: selectCardId\n      })\n      .then(res => {\n        const {data} = res;\n        store.dispatch(gameDataAction.setData(data.game));\n        store.dispatch(monsterEffectAction.setData(data.monsterEffect));\n      });\n  } catch (err) {\n    console.error(err);\n  }\n};\n","import React, {useEffect} from \"react\";\nimport {Card, Row, Col} from \"react-bootstrap\";\nimport {useSelector} from \"react-redux\";\nimport {getPlayer, getMonster} from \"../../utils/apiCalls\";\nimport \"./gameMember.css\";\n\nconst GameMember = ({image, name, maxHp, hp, shield}) => {\n  const gameId = useSelector(state => state.gameDataReducer.dataGame.id);\n\n  useEffect(() => {\n    getPlayer(gameId);\n    getMonster(gameId);\n  }, [gameId]);\n\n  return (\n    <div className='game-member'>\n      <Row className='row-member'>\n        <Col>\n          <Card className='border-0'>\n            <Row>\n              <Col col={3}>\n                <Card.Img\n                  className='card-image border'\n                  top='true'\n                  width='100%'\n                  src={image}\n                  alt='Card image cap'\n                  bg-dark='true'\n                />\n              </Col>\n              <Col col={7}>\n                <Card.Body className='card-body-member bg-dark'>\n                  <Card.Title id='title-member'>{name}</Card.Title>\n                  <Card.Title id='title-lives'>\n                    {\" \"}\n                    HP: {hp}/{maxHp}\n                  </Card.Title>\n                </Card.Body>\n              </Col>\n              <Col col={2}>\n                <div className='card-shield bg-secondary'>\n                  <p>Shield: {shield}</p>\n                </div>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default GameMember;\n","import {SELECT_CARD} from \"../constants/selectCard\";\n\nconst setData = data => ({type: SELECT_CARD, data});\n\nexport const selectCardAction = {\n  setData\n};\n\nexport default selectCardAction;\n","export const SELECT_CARD = \"SELECT_CARD\";\n","import React, {useEffect} from \"react\";\nimport {Card, Col} from \"react-bootstrap\";\nimport {useDispatch} from \"react-redux\";\nimport {useSelector} from \"react-redux\";\nimport selectCardAction from \"../../model/actions/selectCard\";\nimport {getCards} from \"../../utils/apiCalls\";\nimport \"./gameCard.css\";\n\nconst GameCard = () => {\n  const dispatch = useDispatch();\n\n  const monsterData = useSelector(\n    state => state.monsterEffectReducer.monsterEffect\n  );\n\n  const playerData = useSelector(\n    state => state.playerDataReducer.playerData.id\n  );\n\n  const dataCard = useSelector(state => state.cardDataReducer.cardData);\n\n  const arrayCard = dataCard.map(card => card);\n\n  const cardData = arrayCard.reverse().slice(0, 3);\n\n  const selectedCard = useSelector(state => state.selectCardReducer.selectCard);\n\n  useEffect(() => {\n    getCards(playerData);\n  }, [playerData]);\n\n  const horrorCard = monsterData.effect;\n\n  const handleCallSelected = data => {\n    dispatch(selectCardAction.setData(data));\n  };\n  return (\n    cardData &&\n    cardData.map(card => {\n      const {effect, value, id} = card;\n      console.log(\"card id\", id);\n      return (\n        <Col key={id} col='4'>\n          <Card className='game-card bg-primary'>\n            <Card.Body\n              className={`${\n                horrorCard === \"HORROR\"\n                  ? \"disabledCard bg-danger\"\n                  : \" activeCard bg-success  \"\n              } ${selectedCard === id ? \"bg-info\" : \"bg-success\"}`}\n              onClick={() =>\n                horrorCard !== \"HORROR\" ? handleCallSelected(id) : false\n              }\n            >\n              <Card.Text className='card-value'>{value}</Card.Text>{\" \"}\n              <Card.Text className='title-card'>{effect}</Card.Text>\n            </Card.Body>\n          </Card>\n        </Col>\n      );\n    })\n  );\n};\n\nexport default GameCard;\n","import React from \"react\";\nimport {Modal, Button} from \"react-bootstrap\";\n\nconst ModalNotification = props => (\n  <>\n    <Modal show={props.show}>\n      <Modal.Header>\n        <Modal.Title>{props.result}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{props.statistics}</Modal.Body>\n      <Modal.Footer>\n        <Button variant='primary' onClick={props.playAgain}>\n          Play again\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  </>\n);\nexport default ModalNotification;\n","import React, {useState} from \"react\";\nimport \"./gameTurns.css\";\nimport {useSelector} from \"react-redux\";\nimport {Button} from \"react-bootstrap\";\nimport {\n  getCards,\n  getPlayer,\n  getMonster,\n  getSelectCards\n} from \"../../utils/apiCalls\";\nimport ModalNotification from \"../modalNotification\";\nimport {useHistory} from \"react-router-dom\";\n\nconst GameTurns = ({currentTurn, past, turnsLeft}) => {\n  const history = useHistory();\n\n  const playerData = useSelector(state => state.playerDataReducer.playerData);\n  const monsterData = useSelector(\n    state => state.monsterDataReducer.monsterData\n  );\n  const fullGameData = useSelector(state => state.gameDataReducer.dataGame);\n  const playerDataId = playerData.id;\n  const gameId = fullGameData.id;\n  const selectCardId = useSelector(state => state.selectCardReducer.selectCard);\n\n  const [modalShow, setModalShow] = useState(false);\n  const [gameResult, setGameResult] = useState(\"\");\n  const [gameStatistics, setGameStatistics] = useState(\"\");\n\n  const turnClick = async () => {\n    await getSelectCards(gameId, selectCardId);\n    await getCards(playerDataId);\n    await getPlayer(gameId);\n    await getMonster(gameId);\n\n    if (\n      (monsterData.hp > playerData.hp && fullGameData.turnsLeft === 0) ||\n      (playerData.hp === 0 && monsterData.hp > 0)\n    ) {\n      setModalShow(true);\n      setGameResult(\"Ups.. you lose! :(\");\n      setGameStatistics(\n        `${monsterData.name}: ${monsterData.hp} ... ${playerData.name}: ${playerData.hp}`\n      );\n    } else if (\n      monsterData.hp === playerData.hp &&\n      fullGameData.turnsLeft === 0\n    ) {\n      setModalShow(true);\n      setGameResult(\"It's a draw\");\n      setGameStatistics(\n        `${monsterData.name}: ${monsterData.hp} ... ${playerData.name}: ${playerData.hp}`\n      );\n    } else if (\n      (monsterData.hp < playerData.hp && fullGameData.turnsLeft === 0) ||\n      (playerData.hp > 0 && monsterData.hp === 0)\n    ) {\n      setModalShow(true);\n      setGameResult(\"Congratulations! You Win! (:\");\n      setGameStatistics(\n        `${monsterData.name}: ${monsterData.hp} ... ${playerData.name}: ${playerData.hp}`\n      );\n    }\n  };\n\n  return (\n    <div className='game-board-turns'>\n      <div className='game-turns'>\n        <h3>TURNS</h3>\n      </div>\n      <div className='current-past-left'>\n        <div className='game-current'>\n          <h6>CURRENT</h6>\n          <h1>{currentTurn}</h1>\n        </div>\n        <div className='game-past'>\n          <h6>PAST</h6>\n          <h1>{past}</h1>\n        </div>\n        <div className='game-left'>\n          <h6>LEFT</h6>\n          <h1>{turnsLeft}</h1>\n        </div>\n        <div className='game-button'>\n          <Button onClick={() => turnClick()}>END TURN</Button>\n        </div>\n      </div>\n      <div className='modal'>\n        <ModalNotification\n          show={modalShow}\n          result={gameResult}\n          statistics={gameStatistics}\n          playAgain={() => history.push(\"/\")}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default GameTurns;\n","import React from \"react\";\nimport {Row} from \"react-bootstrap\";\nimport {useSelector} from \"react-redux\";\nimport GameMember from \"../gameMember\";\nimport Card from \"../gameCard\";\nimport GameTurns from \"../gameTurns\";\nimport playerImage from \"../../shared/images/playerImage.jpg\";\nimport \"./gameBoard.css\";\n\nconst GameBoard = () => {\n  /* ------- Bringing state -------*/\n  const fullGameData = useSelector(state => state.gameDataReducer.dataGame);\n  const playerData = useSelector(state => state.playerDataReducer.playerData);\n  const monsterData = useSelector(\n    state => state.monsterDataReducer.monsterData\n  );\n  const monsterEffect = useSelector(\n    state => state.monsterEffectReducer.monsterEffect\n  );\n  const horrorCard = monsterEffect.effect;\n\n  /* ------------------------------- */\n\n  return (\n    <div className='game-member-board'>\n      <div className='enemy'>\n        <GameMember\n          hp={monsterData.hp}\n          maxHp={monsterData.maxHp}\n          name={monsterData.name}\n          shield={monsterData.shield}\n          image={monsterData.image}\n        />\n      </div>\n      <div className='player'>\n        <GameMember\n          hp={playerData.hp}\n          maxHp={playerData.maxHp}\n          name={playerData.name}\n          shield={playerData.shield}\n          image={playerImage}\n        />\n      </div>\n\n      <div className='cards'>\n        <Row className='rowCards'>\n          <Card />\n        </Row>\n      </div>\n      <GameTurns\n        currentTurn={fullGameData.currentTurn}\n        turnsLeft={fullGameData.turnsLeft}\n        past={\n          fullGameData.currentTurn === 0 ? \"0\" : fullGameData.currentTurn - 1\n        }\n      />\n      <div className='messageCard'>\n        {horrorCard === \"HORROR\"\n          ? `Your cards were canceled by  ${monsterData.name}. Go to the next turn`\n          : false}\n      </div>\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import React from \"react\";\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport CreateGame from \"../features/createGame\";\nimport GameBoard from \"../features/gameBoard/index.jsx\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className='app'>\n        <Switch>\n          <Route path='/' exact>\n            <CreateGame />\n          </Route>\n          <Route path='/board' exact>\n            <GameBoard />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import {GAME_DATA} from \"../constants/gameData\";\n\nconst initialState = {\n  dataGame: []\n};\n\nconst gameDataReducer = (state = initialState, action) => {\n  if (action.type === GAME_DATA) {\n    return {\n      ...state,\n      dataGame: action.data\n    };\n  }\n\n  return {...state};\n};\n\nexport default gameDataReducer;\n","import {PLAYER_DATA} from \"../constants/playerData\";\n\nconst initialState = {\n  playerData: []\n};\n\nconst playerDataReducer = (state = initialState, action) => {\n  if (action.type === PLAYER_DATA) {\n    return {\n      ...state,\n      playerData: action.data\n    };\n  }\n\n  return {...state};\n};\n\nexport default playerDataReducer;\n","import {MONSTER_DATA} from \"../constants/monsterData\";\n\nconst initialState = {\n  monsterData: []\n};\n\nconst monsterDataReducer = (state = initialState, action) => {\n  if (action.type === MONSTER_DATA) {\n    return {\n      ...state,\n      monsterData: action.data\n    };\n  }\n\n  return {...state};\n};\n\nexport default monsterDataReducer;\n","import {CARD_DATA} from \"../constants/cardData\";\n\nconst initialState = {\n  cardData: []\n};\n\nconst cardDataReducer = (state = initialState, action) => {\n  if (action.type === CARD_DATA) {\n    return {\n      ...state,\n      cardData: action.data\n    };\n  }\n\n  return {...state};\n};\n\nexport default cardDataReducer;\n","import {SELECT_CARD} from \"../constants/selectCard\";\n\nconst initialState = {\n  selectCard: []\n};\n\nconst selectCardReducer = (state = initialState, action) => {\n  if (action.type === SELECT_CARD) {\n    return {\n      ...state,\n      selectCard: action.data\n    };\n  }\n\n  return {...state};\n};\nexport default selectCardReducer;\n","import {MONSTER_EFFECT} from \"../constants/monsterEffect\";\n\nconst initialState = {\n  monsterEffect: []\n};\n\nconst monsterEffectReducer = (state = initialState, action) => {\n  if (action.type === MONSTER_EFFECT) {\n    return {\n      ...state,\n      monsterEffect: action.data\n    };\n  }\n\n  return {...state};\n};\n\nexport default monsterEffectReducer;\n","import {combineReducers} from \"redux\";\nimport gameDataReducer from \"./gameData\";\nimport playerDataReducer from \"./playerData\";\nimport monsterDataReducer from \"./monsterData\";\nimport cardDataReducer from \"./cardData\";\nimport selectCardReducer from \"./selectCard\";\nimport monsterEffectReducer from \"./monsterEffect\";\n\nconst rootReducer = combineReducers({\n  gameDataReducer,\n  playerDataReducer,\n  monsterDataReducer,\n  cardDataReducer,\n  selectCardReducer,\n  monsterEffectReducer\n});\n\nexport default rootReducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\"Service-Worker\": \"script\"}\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {Provider} from \"react-redux\";\nimport configureStore from \"./model/configureStore\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nexport const store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {createStore, compose} from \"redux\";\nimport rootReducer from \"./reducers/root\";\n\nexport default function configureStore(initialState) {\n  const composeEnhancers =\n    (typeof window !== \"undefined\" &&\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n    compose;\n\n  return createStore(rootReducer, initialState, composeEnhancers());\n}\n"],"sourceRoot":""}